// Generated by CoffeeScript 1.12.0
var Heyoffline,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Heyoffline = (function() {
  Heyoffline.prototype.version = '1.1.3';

  Heyoffline.prototype.options = {
    text: {
      title: "You're currently offline",
      content: "You might want to wait until your network comes back before continuing.<br /><br />",
      button: "Relax, I know what I'm doing"
    },
    monitorFields: false,
    prefix: 'heyoffline',
    noStyles: false,
    disableDismiss: false,
    elements: ['input', 'select', 'textarea', '*[contenteditable]']
  };

  Heyoffline.prototype.modified = false;

  function Heyoffline(options) {
    this.hideMessage = bind(this.hideMessage, this);
    this.offline = bind(this.offline, this);
    this.online = bind(this.online, this);
    this._extend(this.options, options);
    this.setup();
  }

  Heyoffline.prototype.setup = function() {
    this.events = {
      element: ['keyup', 'change'],
      network: ['online', 'offline']
    };
    this.elements = {
      fields: document.querySelectorAll(this.options.elements.join(',')),
      overlay: document.createElement('div'),
      modal: document.createElement('div'),
      heading: document.createElement('h2'),
      content: document.createElement('p'),
      button: document.createElement('a')
    };
    this.defaultStyles = {
      overlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        background: 'rgba(0, 0, 0, 0.3)',
        zIndex: 500
      },
      modal: {
        padding: '15px',
        background: '#fff',
        boxShadow: '0 2px 30px rgba(0, 0, 0, 0.3)',
        width: '450px',
        margin: '0 auto',
        position: 'relative',
        top: '30%',
        color: '#444',
        borderRadius: '2px',
        zIndex: 600
      },
      heading: {
        fontSize: '1.7em',
        paddingBottom: '15px'
      },
      content: {
        paddingBottom: '15px'
      },
      button: {
        fontWeight: 'bold',
        cursor: 'pointer'
      }
    };
    return this.attachEvents();
  };

  Heyoffline.prototype.createElements = function() {
    this.createElement(document.body, 'overlay');
    this.resizeOverlay();
    this.createElement(this.elements.overlay, 'modal');
    this.createElement(this.elements.modal, 'heading', this.options.text.title);
    this.createElement(this.elements.modal, 'content', this.options.text.content);
    if (!this.options.disableDismiss) {
      this.createElement(this.elements.modal, 'button', this.options.text.button);
      return this._addEvent(this.elements.button, 'click', this.hideMessage);
    }
  };

  Heyoffline.prototype.createElement = function(context, element, text) {
    this.elements[element].setAttribute('class', this.options.prefix + "_" + element);
    this.elements[element] = context.appendChild(this.elements[element]);
    if (text) {
      this.elements[element].innerHTML = text;
    }
    if (!this.options.noStyles) {
      return this._setStyles(this.elements[element], this.defaultStyles[element]);
    }
  };

  Heyoffline.prototype.resizeOverlay = function() {
    return this._setStyles(this.elements.overlay, {
      height: window.innerHeight + "px"
    });
  };

  Heyoffline.prototype.destroyElements = function() {
    if (this.elements.overlay) {
      return this._destroy(this.elements.overlay);
    }
  };

  Heyoffline.prototype.attachEvents = function() {
    var event, field, i, j, len, len1, ref, ref1;
    ref = this.elements.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      this.elementEvents(field);
    }
    ref1 = this.events.network;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      event = ref1[j];
      this.networkEvents(event);
    }
    return this._addEvent(window, 'resize', (function(_this) {
      return function() {
        return _this.resizeOverlay();
      };
    })(this));
  };

  Heyoffline.prototype.elementEvents = function(field) {
    var event, i, len, ref, results;
    ref = this.events.element;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      event = ref[i];
      results.push((function(_this) {
        return function(event) {
          return _this._addEvent(field, event, function() {
            return _this.modified = true;
          });
        };
      })(this)(event));
    }
    return results;
  };

  Heyoffline.prototype.networkEvents = function(event) {
    return this._addEvent(window, event, this[event]);
  };

  Heyoffline.prototype.online = function(event) {
    return this.hideMessage();
  };

  Heyoffline.prototype.offline = function() {
    if (!(this.options.monitorFields && !this.modified)) {
      return this.showMessage();
    }
  };

  Heyoffline.prototype.showMessage = function() {
    this.createElements();
    if (this.options.onOffline) {
      return this.options.onOffline.call(this);
    }
  };

  Heyoffline.prototype.hideMessage = function(event) {
    if (event) {
      event.preventDefault();
    }
    this.destroyElements();
    if (this.options.onOnline) {
      return this.options.onOnline.call(this);
    }
  };

  Heyoffline.prototype._extend = function(destination, source) {
    var property;
    if (source) {
      for (property in source) {
        if (source[property] && source[property].constructor && source[property].constructor === Object) {
          destination[property] = destination[property] || {};
          arguments.callee(destination[property], source[property]);
        } else {
          destination[property] = source[property];
        }
      }
    }
    return destination;
  };

  Heyoffline.prototype._addEvent = function(element, event, fn, useCapture) {
    if (useCapture == null) {
      useCapture = false;
    }
    return element.addEventListener(event, fn, useCapture);
  };

  Heyoffline.prototype._setStyles = function(element, styles) {
    var key, results;
    results = [];
    for (key in styles) {
      results.push(element.style[key] = styles[key]);
    }
    return results;
  };

  Heyoffline.prototype._destroy = function(element) {
    if (element.parentNode) {
      return element.parentNode.removeChild(element);
    }
  };

  return Heyoffline;

})();
